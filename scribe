import os
import time
from termcolor import colored
from math import sin, cos, pi
# This is the Canvas class. It defines some height and width, and a 
# matrix of characters to keep track of where the TerminalScribes are moving
class Canvas:
    def __init__(self, width, height):
        self._x = width
        self._y = height
        # This is a grid that contains data about where the 
        # TerminalScribes have visited
        self._canvas = [[' ' for y in range(self._y)] for x in range(self._x)]

    # Returns True if the given point is outside the boundaries of the Canvas
    def hitsWall(self, point):
        return point[0] < 0 or point[0] >= self._x or point[1] < 0 or point[1] >= self._y

    # Set the given position to the provided character on the canvas
    def setPos(self, pos, mark):
        self._canvas[pos[0]][pos[1]] = mark

    # Clear the terminal (used to create animation)
    def clear(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    # Clear the terminal and then print each line in the canvas
    def print(self):
        self.clear()
        for y in range(self._y):
            print(' '.join([col[y] for col in self._canvas]))

class TerminalScribe:
    def __init__(self, canvas,direction=0):
        self.canvas = canvas
        self.trail = '.'
        self.mark = '*'
        self.framerate = 0.2
        self.pos = [25, 25]
        self.direction = direction

    def up(self):
        pos = [self.pos[0], self.pos[1]-1]
        if not self.canvas.hitsWall(pos):
            self.draw(pos)

    def down(self):
        pos = [self.pos[0], self.pos[1]+1]
        if not self.canvas.hitsWall(pos):
            self.draw(pos)

    def right(self):
        pos = [self.pos[0]+1, self.pos[1]]
        if not self.canvas.hitsWall(pos):
            self.draw(pos)

    def left(self):
        pos = [self.pos[0]-1, self.pos[1]]
        if not self.canvas.hitsWall(pos):
            self.draw(pos)

    def draw(self, pos):
        # Set the old position to the "trail" symbol
        self.canvas.setPos(self.pos, self.trail)
        # Update position
        self.pos = pos
        # Set the new position to the "mark" symbol
        self.canvas.setPos(self.pos, colored(self.mark, 'red'))
        # Print everything to the screen
        self.canvas.print()
        # Sleep for a little bit to create the animation
        time.sleep(self.framerate)
    def draw_square(self,size):
         size = size-1
        # for i in range(size*4):
        #     if i<4:
        #         self.right()
        #     elif i>=4 and i<8:
        #         self.down()
        #     elif i>=9 and i<13:
        #         self.left()
        #     elif i>=14 :
        #         self.up()
         for i in range(size):
            self.right()
         for i in range(size):
            self.down()
         for i in range(size):
            self.left()
         for i in range(size):
            self.up()     
    # performing a check for the direction
    def check_direction(self):
        if not 0<=self.direction<=360:
            print("Invalid Direction")
            # by default we will set it to 0
            self.direction = 0
    def forward(self,dire=None):
        if not dire:
            pos = [self.pos[0]+round(sin((self.direction/180)*pi)), self.pos[1]-round(cos((self.direction/180)*pi))] 
        else:
            pos = [self.pos[0]+round(sin((dire/180)*pi)), self.pos[1]-round(cos((dire/180)*pi))]     
        if not self.canvas.hitsWall(pos):
                self.draw(pos)  



# Create a new Canvas instance that is 30 units wide by 30 units tall 
canvas = Canvas(50, 50)

# Create a new scribe and give it the Canvas object
scribe = TerminalScribe(canvas, 180)

# scribe.draw_square(5)

# moving the scribe in the direction set during it's construction 

scribe.forward(90)
scribe.forward(90)
scribe.forward(270)
scribe.forward(360)
